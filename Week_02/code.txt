//有效的字母异位词
class Solution {
    public boolean isAnagram(String s, String t) {
        //
        /*if (s.length() != t.length()) return false;
        Map<Character,Integer> map = new HashMap();
        for (char c : s.toCharArray()) {
            int count = map.getOrDefault(c, 0) + 1;
            map.put(c,count);
        }
        for (char c : t.toCharArray()) {
            int count = map.getOrDefault(c, 0) - 1;
            map.put(c,count);
        }
        for (char c : map.keySet()) {
            if (map.get(c) != 0) {
                return false;
            }
        }
        return true;*/

        /*if (s.length() != t.length()) return false;
        int[] res = new int[26];
        for (int i = 0; i < s.length(); i++) {
            res[s.charAt(i) - 'a'] = res[s.charAt(i) - 'a']+1;
            res[t.charAt(i) - 'a'] = res[t.charAt(i) - 'a']-1;
        }
        for (int c : res) {
            if (c != 0) {
                return false;
            }
        }
        return true;*/
         
        //hash
        if(s == null || s.length() != t.length()) return false;
        Map<Character, Integer> map = new HashMap();
        for (int i = 0; i < s.length(); i++){
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
            map.put(t.charAt(i), map.getOrDefault(t.charAt(i), 0) - 1);
        }
        for (Character num : map.keySet()) {
            if (0 != map.get(num)) {
                return false;
            }
        }
        return true;
		
		
    }
}



//N叉树的前序遍历
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<Integer> preorder(Node root) {
        LinkedList<Integer> list = new LinkedList<>();
        preOpr(list,root);
        return list;
    }

    public static void preOpr(LinkedList<Integer> list,Node root){
        if(root==null){
            return;
        }
        list.add(root.val);
        for(Node child : root.children){
            preOpr(list,child);
        }
    }
}