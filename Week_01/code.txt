合并两个有序链表：
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        } else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
}

加一：
class Solution {
    public int[] plusOne(int[] digits) {
        for (int i=digits.length-1; i >= 0; i--) {
            digits[i] = digits[i]+1;
            digits[i] = digits[i] % 10;
            if (digits[i] != 0){
                return digits;
            }
        }
        digits = new int[digits.length + 1];
        digits[0] = 1;
        return digits;
    }
}

接雨水：
class Solution {
    public int trap(int[] height) {
        Stack<Integer> stack = new Stack();
        int sum = 0;
        int cur = 0;
        while (cur < height.length){
            while (!stack.isEmpty() && height[cur] > height[stack.peek()]) {
                int h = height[stack.peek()];
                stack.pop();
                if (stack.isEmpty()) break;
                int dis = cur - stack.peek() - 1;
                int min = Math.min(height[cur], height[stack.peek()]);
                sum = sum + dis * (min - h);
                
            }
            stack.push(cur);
            cur++;
        }
        return sum;
    }
}